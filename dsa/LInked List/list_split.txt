#include <stdio.h>
#include <stdlib.h>

// Definition of a singly linked list node
struct ListNode {
    int val;
    struct ListNode* next;
};

/**
 * Splits a given linked list into two sublists of roughly equal length
 * @param head Pointer to the head of the original linked list
 * @param front Pointer to the head of the front sublist (will be modified)
 * @param back Pointer to the head of the back sublist (will be modified)
 */
void FrontBackSplit(struct ListNode* head, struct ListNode** front, struct ListNode** back) {
    // Handle the case of an empty or single-element list
    if (head == NULL || head->next == NULL) {
        *front = head;
        *back = NULL;
        return;
    }

    // Find the middle point of the list using the "runner" technique
    struct ListNode* slow = head;
    struct ListNode* fast = head->next;
    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }

    // Split the list at the middle point
    *front = head;
    *back = slow->next;
    slow->next = NULL;
}

// Utility function to create a new node with a given value
struct ListNode* newNode(int val) {
    struct ListNode* node = (struct ListNode*)malloc(sizeof(struct ListNode));
    node->val = val;
    node->next = NULL;
    return node;
}

// Utility function to print a linked list
void printList(struct ListNode* head) {
    while (head != NULL) {
        printf("%d ", head->val);
        head = head->next;
    }
    printf("\n");
}

int main() {
    // Create a sample linked list
    struct ListNode* head = newNode(2);
    head->next = newNode(3);
    head->next->next = newNode(5);
    head->next->next->next = newNode(7);
    head->next->next->next->next = newNode(11);

    // Split the list into front and back sublists
    struct ListNode* front = NULL;
    struct ListNode* back = NULL;
    FrontBackSplit(head, &front, &back);

    // Print the resulting sublists
    printf("Front list: ");
    printList(front);
    printf("Back list: ");
    printList(back);

    return 0;
}
/* fast pointer moves two places and the slow one moves one place. by the time fast reaches the end of the list the slow pointer would have reached the middle*/
